Pseudocode For Programme Admin

FUNCTION menuProgrammeAdmin():
    DECLARE choice AS INTEGER
    WHILE True:
        PRINT "Programme Admin Menu"
        PRINT "1. Add Programme"
        PRINT "2. Update Programme"
        PRINT "3. Delete Programme"
        PRINT "4. View Programme"
        PRINT "5. Exit"
        PRINT "Enter your choice: "
        INPUT choice
        SWITCH(choice) 
            case 1 THEN
                clearscreen()
                viewstudentprofile()
                break
            case 2 THEN
                clearscreen()
                courseMenu()
                break
            case 3 THEN
                OUTPUT "Goodbye!"
                clearscreen()
                loginmenu()
                break
    ENDWHILE
ENDFUNCTION menuProgrammeAdmin()

FUNCTION viewstudentprofile():
    DECLARE studentid AS INTEGER
    DECLARE studentprofile studentprofile
    PRINT "Enter Student ID: "
    INPUT studentid
    FILE OPEN "studentfile.txt" AS mainstudentfile IN READ
    WHILE NOT END OF FILE reached in mainstudentfile DO
        READ studentid, name, intakecode, contactnumber, email INTO studentprofile
        IF studentprofile.studenid EQUALS TO studenid THEN
        PRINT formatted student profile using studentprofile data
            (Name, Student ID, Intake Code, Contact Number, Email)
        PRINT "Do you want to return to previous menu? (y/n): "
        DECLARE choice AS CHARACTER
        INPUT choice
        IF choice EQUALS "y" THEN
            FILE CLOSE mainstudentfile
            break
        ENDIF
    ENDWHILE
ENDFUNCTION viewstudentprofile()


FUNCTION checkavailabilityofcourse()
    INTIALIZE Course AS course
    FILE OPEN "course.txt" AS maincoursefile IN READ
    WHILE NOT END OF FILE reached in maincoursefile DO
        READ intakecode, module1, module2, module3, module4 ,module5 INTO course
        IF course.intakeCode EQUALS intakeCode THEN
            FILE CLOSE maincoursefile
            RETURN TRUE
        ELSE
            FILE CLOSE maincoursefile
            RETURN FALSE
        ENDIF
    ENDWWHILE
ENDFUNCTION checkavailabilityofcourse()


FUNCTION createcourse()
    INTIALIZE Course AS course
    FILE OPEN "course.txt" AS maincoursefile IN APPEND
    PRINT "Enter Intake Code: "
    INPUT intakecode TO course
    IF checkavailabilityofcourse(course.intakecode) EQUALS TRUE THEN
        PRINT "Course already exist"
    ELSE
        PRINT "Enter Module 1: "
        INPUT course.module1
        PRINT "Enter Module 2: "
        INPUT course.module2
        PRINT "Enter Module 3: "
        INPUT course.module3
        PRINT "Enter Module 4: "
        INPUT course.module4
        PRINT "Enter Module 1: "
        INPUT course.module5
        WRITE course data TO maincoursefile
        FILE CLOSE maincoursefile
        PRINT "Course added successfully"
    ENDIF
ENDFUNCTION createcourse

FUNCTION updateCourse()
    INTIALIZE Course AS course
    FILE OPEN "course.txt" AS maincoursefile IN READ
    FILE OPEN "temp.txt" AS tempcoursefile IN WRITE
    DECLARE intakeCode AS STRING MAX 10 CHAR
    PRINT "Enter Intake Code: "
    INPUT intakeCode
    WHILE WHILE NOT END OF FILE reached in maincoursefile DO
        READ intakecode, module1, module2, module3, module4 ,module5 INTO course
        IF course.intakeCode EQUALS intakeCode THEN
            PRINT "Enter Module 1: "
            INPUT course.module1
            PRINT "Enter Module 2: "
            INPUT course.module2
            PRINT "Enter Module 3: "
            INPUT course.module3
            PRINT "Enter Module 4: "
            INPUT course.module4
            PRINT "Enter Module 1: "
            INPUT course.module5
            WRITE course data TO tempcoursefile
        ELSE 
            WRITE course data TO tempcoursefile
        ENDIF
    ENDWHILE
    FILE CLOSE maincoursefile
    FILE CLOSE tempcoursefile
    REMOVE FILE "course.txt"
    RENAME "temp.txt" TO "course.txt"
ENDFUNCTION updateCourse

FUNCTION viewCourse()
    INTIALIZE Course AS course
    DECLARE intakecode AS STRING MAX 20 CHARACTER
    FILE OPEN "course.txt" AS maincourse IN READ
    PRINT "Please enter the intake code to view: "
    INPUT intakecode
    WHILE NOT END OF FILE reached in maincoursefile DO
        READ intakecode, module1, module2, module3, module4 ,module5 INTO course
        IF intakecode EQUALS course.intakecode THEN
            PRINT "Intake Code: "  course.intakecode
            PRINT "Module 1: "     course.module1
            PRINT "Module 2: "     course.module2
            PRINT "Module 3: "     course.module3
            PRINT "Module 4: "     course.module4
            PRINT "Module 5: "     course.module5
            PRINT "Do you want to return to previous menu? (y/n): "
            DECLARE choice AS CHARACTER
            INPUT choice
            IF choice EQUALS "y" THEN
                FILE CLOSE maincoursefile
                break
            ENDIF
        ENDIF
    ENDWHILE
ENDFUNCTION viewCourse

FUNCTION courseDelete()
    INTIALIZE Course AS course
    FILE OPEN "course.txt" AS maincourse IN READ
    FILE OPEN "temp.txt" AS tempcourse IN WRITE
    DECLARE intakecode AS STRING MAX 10 CHARACTER
    PRINT "Enter Intake Code: "
    INPUT intakecode
    WHILE NOT END OF FILE reached in maincoursefile DO
        READ intakecode, module1, module2, module3, module4 ,module5 INTO course
        IF course.intakecode EQUALS intakecode THEN
            continue
        ELSE
            WRITE course data TO tempcourse
        ENDIF
    ENDWHILE
    FILE CLOSE maincoursefile
    FILE CLOSE tempcoursefile
    REMOVE FILE "course.txt"
    RENAME "temp.txt" TO "course.txt"
    PRINT "Course deleted successfully"
ENDFUNCTION courseDelete

FUNCTION enrolstudent()
    DECLARE studentid AS INTEGER
    INTIALIZE studentprofile AS student
    PRINT "Enter Student ID: "
    INPUT studentid

    OPEN FILE "studentfile.txt" AS mainstudentfile IN READ
    IF mainstudentfile IS NULL THEN
        PRINT ERROR MESSAGE "Error opening studentfile.txt"
        RETURN
    ENDIF

    FILE OPEN "temp.txt" AS tempstudentfile IN WRITE
    IF tempstudentfile IS NULL THEN
        PRINT ERROR MESSAGE "Error opening temp.txt"
        FILE CLOSE mainstudentfile
        return
    ENDIF
    
    
    WHILE READING DATA FROM mainstudentfile using fscanf successfully RETURNS 5 DO
        READ studentid, name, intakecode, contactnumber, email INTO student
        IF student.studentid EQUALS studentid THEN
            PRINT "Enter Intake Code: "
            INPUT student.intakecode
            WRITE student data TO tempstudentfile
            CALL enroltocoursemark WITH student.name ,student.intakecode , studentid
            CALL enroltoattendance WITH student.name ,student.intakecode , studentid
        ELSE
            WRITE student data TO tempstudentfile
        ENDIF
    ENDWHILE
    FILE CLOSE mainstudentfile
    FILE CLOSE tempstudentfile

    IF REMOVE FILE "studentfile.txt" NOT EQUALS 0 THEN
        PRINT "Error deleting studentfile.txt"
        RETURN
    ENDIF

    IF RENAME "temp.txt" TO "studentfile.txt" NOT EQUALS 0 THEN
        PRINT "Error renaming temp.txt to studentfile.txt"
        RETURN
    ENDIF

    PRINT "Student enrolled successfully"
ENDFUNCTION enrolstudent

FUNCTION enroltocoursemark()
    PARAMETER name AS STRING. intakecode AS STRING. studentid AS INTEGER
    INTIALIZE Course AS course
    FILE OPEN "course.txt" AS maincoursefile IN READ
    IF maincoursefile IS NULL THEN
        PRINT ERROR MESSAGE "Error opening course.txt"
        RETURN
    ENDIF

    FILE OPEN "coursemark.txt" AS coursemarkfile IN APPEND
    IF coursemarkfile IS NULL THEN
        PRINT ERROR MESSAGE "Error opening coursemark.txt"
        FILE CLOSE maincoursefile
        RETURN
    ENDIF

    WHILE READING DATA FROM maincoursefile using fscanf successfully RETURNS 6 DO
    READ intakecode, module1, module2, module3, module4 ,module5 INTO course
        IF course.intakecode EQUALS intakecode THEN
            APPEND studentid, name , course.module1, course.module2, course.module3, course.module4, course.module5 ,0.0, 0.0, 0.0, 0.0, 0.0 INTO coursemarkfile
        ENDIF
    ENDWHILE

    FILE CLOSE maincoursefile
    FILE CLOSE coursemarkfile
ENDFUNCTION enroltocoursemark

FUNCTION enroltoattendance()
    PARAMETER name AS STRING, studentid AS INTEGER, intakecode AS STRING
    INTIALIZE studentLect AS studentlect
    INTIALIZE Course AS course
    DECLARE i AS INTEGER
    FILE OPEN "attendance.txt" AS attendancefile IN APPEND
    FILE OPEN "course.txt" AS maincoursefile IN READ
    WHILE READING DATA FROM maincoursefile using fscanf successfully RETURNS 6 DO
        READ intakecode, module1, module2, module3, module4 ,module5 INTO course
    ENDWHILE
ENDFUNCTION enroltoattendance

FUNCTION enrollecturer
    INTIALIZE lecturerprofile AS lecturer
    DECLARE lecturerid AS INTEGER
    PRINT "Enter Lectuer ID to assign course: "
    INPUT lecturerid
    FILE OPEN "lecturerfile.txt" AS mainlecturerfile IN READ
    FILE OPEN "temp.txt" AS templecturerfile in WRITE
    WHILE NOT END OF FILE reached in mainlecturerfile DO
        READ lecturerid, name, enrolledcourse ,contactnumber, email INTO lecturer
        IF lecturer.lecturerid EQUALS lecturerid THEN
            PRINT "Enter Intake Code: "
            INPUT lecturer.enrolledcourse
            WRITE lecturer data TO templecturerfile
        ELSE
            WRITE lecturer data TO templecturerfile
        ENDIF
    ENDWHILE
    FILE CLOSE mainlecturerfile
    FILE CLOSE templecturerfile
    REMOVE FILE "lecturerfile.txt"
    RENAME "temp.txt" TO "lecturerfile.txt"
    PRINT "Lecturer assigned to course successfully"
ENDFUNCTION enrollecturer

FUNCTION courseMenu()
    DECLARE choice AS INTEGER
    WHILE TRUE
        PRINT "Course Management & Enrolment"
        PRINT "1. Add Course"
        PRINT "2. Update Course"
        PRINT "3. Delete Course"
        PRINT "4. View Course"
        PRINT "5. Enrol Course for Student"
        PRINT "6. Enrol Course for Lecturer"
        PRINT "7. Exit"
        PRINT "Enter your choice: "
        IF choice IS NOT INTEGER THEN
            PRINT "Please enter the option within the menu"
            clearbuffer()
            CONTINUE()
        ELSE
            SWITCH(choice)
                case 1 THEN
                    clearscreen()
                    createcourse()
                    break
                case 2 THEN
                    clearscreen()
                    updateCourse()
                    break
                case 3 THEN
                    clearscreen()
                    courseDelete()
                    break
                case 4 THEN
                    clearscreen()
                    viewCourse()
                    break()
                case 5 THEN
                    clearscreen()
                    enrolstudent()
                    return 0
                case 6 THEN
                    clearscreen()
                    enrollecturer()
                    return 0
                case 7 THEN
                    clearscreen()
                    menuProgrammeAdmin()
                    return 0
        ENDIF
    ENDWHILE
ENDFUNCTION courseMenu()